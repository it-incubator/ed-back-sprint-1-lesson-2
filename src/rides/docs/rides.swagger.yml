openapi: 3.0.0
info:
  title: API Documentation
  version: 1.0.0


tags:
  - name: Rides
    description: API for managing rides

paths:
  /api/rides:
    get:
      summary: Get a list of all rides
      tags: [ Rides ]
      security:
        - BasicAuth: [ ]
      responses:
        200:
          description: List of all rides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RideListOutput'
    post:
      summary: Create a new ride
      tags: [ Rides ]
      security:
        - BasicAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RideCreateInput'
      responses:
        201:
          description: Ride successfully created for an existing driver with status online
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RideDataOutput'
        400:
          description: Validation error or the driver does not exist or the driver's status is not online
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

  /api/rides/{id}:
    get:
      summary: Get a ride by ID
      tags: [ Rides ]
      security:
        - BasicAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          description: The unique identifier of the ride
          schema:
            type: integer
            example: 5
      responses:
        200:
          description: The requested ride
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RideOutput'
        404:
          description: Ride not found

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
  schemas:
    RideOutput:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/RideDataOutput'
    RideListOutput:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          type: object
        data:
          type: array
          items:
            $ref: '#/components/schemas/RideDataOutput'
    RideDataOutput:
      type: object
      required:
        - type
        - id
        - attributes
      properties:
        type:
          type: string
          enum: [ 'rides' ]
          description: The resource type (must be 'rides')
          example: rides
        id:
          type: string
          description: Unique identifier for the ride
          example: 60c72b2f9b1e8a001c8e4f1a
        attributes:
          type: object
          required:
            - clientName
            - driverId
            - driverName
            - vehicleLicensePlate
            - vehicleName
            - price
            - currency
            - startedAt
          properties:
            clientName:
              type: string
              description: Name of the client who requested the ride
              example: Alice Johnson
            driverId:
              type: number
              description: The unique identifier for the driver
              example: 1
            driverName:
              type: string
              description: The full name of the driver
              example: Tom Rider
            vehicleLicensePlate:
              type: string
              example: XYZ 1234
              description: License plate of the vehicle
            vehicleName:
              type: string
              example: Toyota Camry
              description: Model of the vehicle
            price:
              type: number
              format: float
              example: 15.75
              description: Cost of the trip
            currency:
              type: string
              enum: [ usd, eur ]
              example: usd
              description: Currency in which the cost is specified
            startedAt:
              type: string
              format: date-time
              nullable: true
              example: 2023-03-01T14:30:00Z
              description: Date and time when the ride started
            addresses:
              type: object
              required:
                - from
                - to
              properties:
                from:
                  type: string
                  example: 123 Main St, Cityville
                  description: Starting address of the ride
                to:
                  type: string
                  example: 456 Elm St, Townsville
                  description: Ending address of the ride
    RideCreateInput:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - type
            - attributes
          properties:
            type:
              type: string
              enum: [ 'rides' ]
              description: The resource type (must be 'rides')
              example: rides
            attributes:
              $ref: '#/components/schemas/RideAttributes'
    RideAttributes:
      type: object
      required:
        - clientName
        - driverId
        - driverName
        - vehicleLicensePlate
        - vehicleName
        - price
        - currency
        - startedAt
      properties:
        clientName:
          type: string
          description: Name of the client who requested the ride
          example: Alice Johnson
        driverId:
          type: number
          description: The unique identifier for the driver
          example: 1
        driverName:
          type: string
          description: The full name of the driver
          example: Tom Rider
        vehicleLicensePlate:
          type: string
          example: XYZ 1234
          description: License plate of the vehicle
        vehicleName:
          type: string
          example: Toyota Camry
          description: Model of the vehicle
        price:
          type: number
          format: float
          example: 15.75
          description: Cost of the trip
        currency:
          type: string
          enum: [ usd, eur ]
          example: usd
          description: Currency in which the cost is specified
        startedAt:
          type: string
          format: date-time
          nullable: true
          example: 2023-03-01T14:30:00Z
          description: Date and time when the ride started
        addresses:
          type: object
          required:
            - from
            - to
          properties:
            from:
              type: string
              example: 123 Main St, Cityville
              description: Starting address of the ride
            to:
              type: string
              example: 456 Elm St, Townsville
              description: Ending address of the ride
    ValidationError:
      type: object
      properties:
        field:
          type: string
          example: "clientName"
        message:
          type: string
          example: "Client name is required"
    ValidationErrorResponse:
      type: object
      properties:
        errorMessages:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
